import streamlit as st
import joblib
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

from classes._mlp import MLP
from classes._knn import KNN
from classes._naive_bayes import NaiveBayes

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üîé –í–∏—è–≤–ª–µ–Ω–Ω—è —Å–ø–∞–º—É —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö")

# –í–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ
model_choice = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", ["MLP", "KNN", "Naive Bayes"])
model_file = f"models/{model_choice.lower().replace(' ', '_')}_custom.pkl"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
model = joblib.load(model_file)
vectorizer = joblib.load("models/tfidf_vectorizer.pkl")

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
metrics = joblib.load("models/model_metrics.pkl")

# –í–∏–≤—ñ–¥ –º–µ—Ç—Ä–∏–∫
st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª—ñ:")
col1, col2, col3, col4 = st.columns(4)
col1.metric("Accuracy", f"{metrics[model_choice]['Accuracy']:.2%}")
col2.metric("Precision", f"{metrics[model_choice]['Precision']:.2%}")
col3.metric("Recall", f"{metrics[model_choice]['Recall']:.2%}")
col4.metric("F1-score", f"{metrics[model_choice]['F1-score']:.2%}")

# –í–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
st.subheader("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
user_input = st.text_area("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")

if st.button("–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏"):
    if user_input.strip() == "":
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    else:
        X_input = vectorizer.transform([user_input]).toarray()
        prediction = model.predict(X_input)[0]
        label = "–°–ü–ê–ú üö´" if prediction == 1 else "–ù–ï –°–ü–ê–ú ‚úÖ"
        st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {label}")

# –ü–æ–±—É–¥–æ–≤–∞ Confusion Matrix
st.subheader("–ú–∞—Ç—Ä–∏—Ü—è –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π:")

try:
    X_train, y_train, X_test, y_test = joblib.load("models/train_test_data.pkl")
    if hasattr(model, "predict"):
        if hasattr(X_test, "toarray"):  # –¥–ª—è MLP
            y_pred = model.predict(X_test.toarray())
        else:
            y_pred = model.predict(X_test)

        cm = confusion_matrix(y_test, y_pred)
        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Ham", "Spam"], yticklabels=["Ham", "Spam"])
        plt.xlabel("–ü—Ä–æ–≥–Ω–æ–∑")
        plt.ylabel("–°–ø—Ä–∞–≤–∂–Ω—î")
        st.pyplot(fig)
except Exception as e:
    st.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ç—Ä–∏—Ü—ñ: {e}")

# –ö–Ω–æ–ø–∫–∞ "–¢–µ—Å—Ç—É–≤–∞—Ç–∏"
if st.button("üß™ –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥–∞—Ö"):
    test_messages = [
        "Congratulations! You've won a free ticket to Bahamas. Click here to claim.",
        "Can we meet tomorrow to finish our assignment?",
        "You've been selected for a $500 reward. Call now.",
        "Don't forget mom's birthday gift.",
        "URGENT: Your bank account is blocked. Verify immediately."
    ]
    for msg in test_messages:
        X_test = vectorizer.transform([msg]).toarray()
        pred = model.predict(X_test)[0]
        res = "–°–ü–ê–ú üö´" if pred == 1 else "–ù–ï –°–ü–ê–ú ‚úÖ"
        st.write(f"**{msg}** ‚Üí {res}")
