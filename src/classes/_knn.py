import numpy as np
import joblib
from collections import Counter
from sklearn.metrics import classification_report, accuracy_score
from scipy.spatial.distance import cosine

# K-Nearest Neighbors (KNN) ‚Äî —Ü–µ –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–∞–±–æ —Ä–µ–≥—Ä–µ—Å—ñ—ó), —è–∫–∏–π:
#   - –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—á–∏—Ç—å –Ω–∞ –µ—Ç–∞–ø—ñ "–Ω–∞–≤—á–∞–Ω–Ω—è";
# –∞ –ø—Ä–∏ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É:
#   - –≤–∏–º—ñ—Ä—é—î –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –≤—Å—ñ—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏;
#   - –æ–±–∏—Ä–∞—î k –Ω–∞–π–±–ª–∏–∂—á–∏—Ö —Å—É—Å—ñ–¥—ñ–≤;
#   - —ñ –≤–∏–∑–Ω–∞—á–∞—î –∫–ª–∞—Å –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É –∑–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è–º –±—ñ–ª—å—à–æ—Å—Ç—ñ.
# –ô–æ–≥–æ –Ω–∞–∑–∏–≤–∞—é—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ø–∞–º‚Äô—è—Ç—ñ (instance-based learning).

# –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ TF-IDF –≤–µ–∫—Ç–æ—Ä–∞–º–∏, –¥–ª—è –Ω–∏—Ö –Ω–∞–π–±—ñ–ª—å—à –≤—ñ–¥—Å—Ç–∞–Ω—å ‚Äî –∫–æ—Å–∏–Ω—É—Å–Ω–∞.
# üìê –ö–æ—Å–∏–Ω—É—Å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å:
# –¶–µ –Ω–µ "–≤—ñ–¥—Å—Ç–∞–Ω—å" —É –ø—Ä—è–º–æ–º—É —Å–µ–Ω—Å—ñ, –∞ –º—ñ—Ä–∞ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ –Ω–∞–ø—Ä—è–º–∫—É –¥–≤–æ—Ö –≤–µ–∫—Ç–æ—Ä—ñ–≤:

# cosine_similarity(A, B) = A * B / |A| * |B|

# –ê –≤—ñ–¥—Å—Ç–∞–Ω—å:

# cosine_distance(A, B) = 1 - cosine_similarity(A, B)

class KNN:
    def __init__(self, k=5):
        self.k = k
        self.X_train = None
        self.y_train = None

    def fit(self, X, y):
        self.X_train = X
        self.y_train = np.ravel(y)

    def predict(self, X):
        return [self._predict_single(x) for x in X]

    def _predict_single(self, x):
        distances = []
        for i in range(self.X_train.shape[0]):
            vec = self.X_train[i]
            a = x.ravel() if isinstance(x, np.ndarray) else x.toarray().ravel()
            b = vec.toarray().ravel()

            if np.linalg.norm(a) == 0 or np.linalg.norm(b) == 0:
                dist = 1.0  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–∞–ª–µ–∫–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å
            else:
                dist = cosine(a, b)

            distances.append((dist, self.y_train[i]))

        nearest = sorted(distances, key=lambda d: d[0])[:self.k]
        nearest_labels = [label for _, label in nearest]

        most_common = Counter(nearest_labels).most_common(1)[0][0]
        return most_common

if __name__ == "__main__":
    X_train, y_train, X_test, y_test = joblib.load('models/train_test_data.pkl')

    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ —Ç—Ä–µ–Ω—É—î–º–æ –≤–ª–∞—Å–Ω–∏–π KNN
    model = KNN(k=5)
    model.fit(X_train, y_train)

    # –ü—Ä–æ–≥–Ω–æ–∑
    y_pred = model.predict(X_test)

    # –û—Ü—ñ–Ω–∫–∞
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("\nClassification Report:\n", classification_report(y_test, y_pred))

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–¥–µ–ª—å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    joblib.dump(model, 'models/knn_custom.pkl')
